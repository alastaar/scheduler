# import * from './generated/prisma.graphql'

type SuccessMessage {
  message: String
}

type Mutation {
  createItem(title: String, description: String, price: Int, image: String, largeImage: String ): Item!
  updateItem(id: ID!, title: String, description: String, price: Int): Item!
  deleteItem(id: ID!): Item!
  signup(email: String!, password: String!, name: String!, lastName: String!, artist: String, emailPreference: [EmailPreference], permissions: [Permission]): User!
  signin(email: String!, password: String!): User!
  signout: SuccessMessage
  requestReset(email: String!): SuccessMessage
  resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
  updatePermissions(permissions: [Permission], userId: ID!): User
  updatePreferences(emailPreference: [EmailPreference], userId: ID!): User
  updateBlackoutDates(blackOut: [String], userId: ID!): User
  addBlackoutRanges(weekday: String, begin: String, end: String): BlackOutDates
  deleteBlackOutRanges(id: ID!): BlackOutDates
  updateUserInfo(name: String, lastName: String, email: String, instagramHandle: String, shop: String, profileImage: String, image: String, price: Int, bio: String, timeDetails: String, userId: ID!): User
  createRequest(requestedId: String, dateOne: String!, timeOne: String!, dateTwo: String, timeTwo: String, dateThree: String, timeThree: String, details: String, referenceImage: String, approved: String): Request!
  updateRequest(requestedId: String, dateOne: String!, timeOne: String!, dateTwo: String, timeTwo: String, dateThree: String, timeThree: String, details: String, referenceImage: String, approved: String): Request!
  approveRequests(id: ID!, dateOne: String!, timeOne: String!, approved: String): Request!
  rejectRequests(id: ID!, rejectReason: String, approved: String): Request!
  deleteRequest(id: ID!): Request!
  addToCart(id: ID!): CartItem
  removeFromCart(id: ID!): CartItem
  createOrder(token: String!): Order!
  createStripeAccount(name: String, lastName: String, country: String, type: String, addressCity: String, addressLineOne: String, addressPostalCode: String, addressState: String, dobDay: String, dobMonth: String, dobYear: String, ssnLastFour: String, stripeToken: String!, userId: ID!): User!
  updateStripeAccount(name: String, lastName: String, country: String, type: String, addressCity: String, addressLineOne: String, addressPostalCode: String, addressState: String, dobDay: String, dobMonth: String, dobYear: String, ssnLastFour: String, stripeToken: String!, userId: ID!): User!
  createBankInfo(bankToken: String!): User!
  updateBankInfo(bankToken: String!): User!
  deleteUser(id: ID!): User!
  createChat(vendor: String!, client: String!): Chat!
  updateChat(id: ID!, vendor: String!, client: String!): Chat!
  createChatMessage(message: String!, chatId: String): ChatMessage!
}

type Query {
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, first: Int): [Item]!
  item(where: ItemWhereUniqueInput!): Item
  itemsConnection(where: ItemWhereInput): ItemConnection!
  me: User
  gettingRequested(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput): [User]!
  user(where: UserWhereUniqueInput!): User
  requests(where: RequestWhereInput, orderBy: RequestOrderByInput, skip: Int, first: Int): [Request]!
  request(where: RequestWhereUniqueInput!): Request
  requestsConnection(where: RequestWhereInput): RequestConnection!
  order(id: ID!): Order
  orders(orderBy: OrderOrderByInput): [Order]!
  chat(where: ChatWhereUniqueInput!): Chat
  chats(orderBy: ChatOrderByInput): [Chat]!
}

type User {
  id: ID!
  accId: String
  name: String!
  lastName: String!
  email: String!
  instagramHandle: String
  shop: String
  price: Int
  bio: String
  profileImage: String
  image: String
  artist: String
  country: String
  type: String
  addressCity: String
  addressLineOne: String
  addressPostalCode: String
  addressState: String
  dobDay: String
  dobMonth: String
  dobYear: String
  ssnLastFour: String
  timeDetails: String
  stripeToken: String
  bankToken: String
  blackOut: [String]
  blackOutRanges: [BlackOutDates]
  permissions: [Permission!]!
  emailPreference: [EmailPreference]
  cart: [CartItem!]!
  chats: [Chat]
}
