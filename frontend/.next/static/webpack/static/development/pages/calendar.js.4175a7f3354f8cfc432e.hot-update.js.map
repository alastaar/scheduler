{"version":3,"file":"static/webpack/static/development/pages/calendar.js.4175a7f3354f8cfc432e.hot-update.js","sources":["webpack:///./components/CalendarList.js","webpack:///./lib/dates.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport gql from 'graphql-tag';\nimport dates from '../lib/dates';\nimport { perPage } from '../config';\nimport BigCalendar from \"react-big-calendar\";\nimport moment from \"moment\";\nimport CalendarStyles from './styles/CalendarStyles';\nimport debounce from 'lodash.debounce';\nimport { Query } from 'react-apollo';\nimport User from './User';\nimport CalendarComponent from './CalendarComponent';\nimport Router from 'next/router';\n\nmoment.locale(\"en\");\nconst localizer = BigCalendar.momentLocalizer(moment);\n\nconst allViews = Object.keys(BigCalendar.Views).map(k => BigCalendar.Views[k]);\n\nconst ALL_REQUESTS_CALENDAR_QUERY = gql`\n  query ALL_REQUESTS_CALENDAR_QUERY {\n    requests(orderBy: createdAt_DESC) {\n      id\n      name\n      email\n      details\n      dateOne\n      timeOne\n      approved\n      user{\n        name\n        lastName\n        email\n      }\n    }\n  }\n`;\n\n\nclass CalendarList extends Component {\n\n allViews = Object.keys(BigCalendar.Views).map(k => BigCalendar.Views[k])\n\n  state = {\n    view: \"day\",\n    date: new Date(),\n    width: 500,\n    cal_events: [],\n  };\n\n  convertDate = (date) => {\n    return moment(date);\n  }\n\n  convertTime = (time24) => {\n    var tmpArr = time24.split(':'), time12;\n    if(+tmpArr[0] == 12) {\n      time12 = tmpArr[0] + ':' + tmpArr[1] + ' pm';\n    }\n    else {\n      if(+tmpArr[0] == 0) {\n        time12 = '12:' + tmpArr[1] + ' am';\n      }\n      else {\n        if(+tmpArr[0] > 12) {\n          time12 = (+tmpArr[0]-12) + ':' + tmpArr[1] + ' pm';\n        }\n        else {\n          time12 = (+tmpArr[0]) + ':' + tmpArr[1] + ' am';\n        }\n      }\n    }\n    return time12;\n  };\n\n    eventStyleGetter = (event, approved, start, end, isSelected) => {\n      var backgroundColor = '#' + event.hexColor;\n      if(event.approved === \"no\") {\n        var style = {\n            backgroundColor: 'red',\n            borderRadius: '0px',\n            opacity: 0.8,\n            color: 'white',\n            border: '0px',\n            display: 'block'\n        };\n      } else if ( event.approved == \"yes\" ) {\n        var style = {\n            backgroundColor: 'black',\n            borderRadius: '0px',\n            opacity: 0.8,\n            color: 'white',\n            border: '0px',\n            display: 'block'\n        };\n      } else {\n        var style = {\n            backgroundColor: 'gold',\n            borderRadius: '0px',\n            opacity: 0.8,\n            color: 'black',\n            border: '0px',\n            display: 'block'\n        };\n      }\n      return {\n          style: style\n      };\n  };\n\n  handleSelectEvent = event => {\n    Router.push({\n      pathname: '/request-item',\n      query: { id: event.id },\n    });\n  };\n\n\n  render() {\n    console.log(this.props);\n    return (\n      <User>\n        {({ data: { me } }) => (\n        <CalendarStyles>\n        <div className=\"key\">\n          <div className=\"red\"></div><span>Pending</span>\n          <div className=\"black\"></div><span>Approved</span>\n          <div className=\"gold\"></div><span>Confirmed</span>\n        </div>\n        <Query query={ALL_REQUESTS_CALENDAR_QUERY}>\n          {({ data, loading, error }) => (\n            <div style={{ height: 500 }}>\n              <BigCalendar\n                localizer={localizer}\n                events={data.requests.filter(request => request.email === me.email).map((request, index) => ({\n                  title: this.convertTime(request.timeOne) + ' ' + request.user.name + ' ' + request.user.email,\n                  start: this.convertDate(request.dateOne),\n                  end: request.dateOne,\n                  approved: request.approved,\n                  id: request.id,\n                }))}\n                step={60}\n                showMultiDayTimes\n                views={this.allViews}\n                onSelectEvent={(event) => this.handleSelectEvent(event)}\n                eventPropGetter={(this.eventStyleGetter)}\n              />\n            </div>\n          )}\n        </Query>\n        </CalendarStyles>\n      )}\n    </User>\n    );\n  }\n}\n\nexport default CalendarList;\nexport { ALL_REQUESTS_CALENDAR_QUERY };\n","\n/* eslint no-fallthrough: off */\nimport dateMath from 'date-arithmetic'\n\nconst MILLI = {\n  seconds: 1000,\n  minutes: 1000 * 60,\n  hours: 1000 * 60 * 60,\n  day: 1000 * 60 * 60 * 24,\n}\n\nconst MONTHS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\nlet dates = {\n  ...dateMath,\n\n  monthsInYear(year) {\n    let date = new Date(year, 0, 1)\n\n    return MONTHS.map(i => dates.month(date, i))\n  },\n\n  firstVisibleDay(date, localizer) {\n    let firstOfMonth = dates.startOf(date, 'month')\n\n    return dates.startOf(firstOfMonth, 'week', localizer.startOfWeek())\n  },\n\n  lastVisibleDay(date, localizer) {\n    let endOfMonth = dates.endOf(date, 'month')\n\n    return dates.endOf(endOfMonth, 'week', localizer.startOfWeek())\n  },\n\n  visibleDays(date, localizer) {\n    let current = dates.firstVisibleDay(date, localizer),\n      last = dates.lastVisibleDay(date, localizer),\n      days = []\n\n    while (dates.lte(current, last, 'day')) {\n      days.push(current)\n      current = dates.add(current, 1, 'day')\n    }\n\n    return days\n  },\n\n  ceil(date, unit) {\n    let floor = dates.startOf(date, unit)\n\n    return dates.eq(floor, date) ? floor : dates.add(floor, 1, unit)\n  },\n\n  range(start, end, unit = 'day') {\n    let current = start,\n      days = []\n\n    while (dates.lte(current, end, unit)) {\n      days.push(current)\n      current = dates.add(current, 1, unit)\n    }\n\n    return days\n  },\n\n  merge(date, time) {\n    if (time == null && date == null) return null\n\n    if (time == null) time = new Date()\n    if (date == null) date = new Date()\n\n    date = dates.startOf(date, 'day')\n    date = dates.hours(date, dates.hours(time))\n    date = dates.minutes(date, dates.minutes(time))\n    date = dates.seconds(date, dates.seconds(time))\n    return dates.milliseconds(date, dates.milliseconds(time))\n  },\n\n  eqTime(dateA, dateB) {\n    return (\n      dates.hours(dateA) === dates.hours(dateB) &&\n      dates.minutes(dateA) === dates.minutes(dateB) &&\n      dates.seconds(dateA) === dates.seconds(dateB)\n    )\n  },\n\n  isJustDate(date) {\n    return (\n      dates.hours(date) === 0 &&\n      dates.minutes(date) === 0 &&\n      dates.seconds(date) === 0 &&\n      dates.milliseconds(date) === 0\n    )\n  },\n\n  duration(start, end, unit, firstOfWeek) {\n    if (unit === 'day') unit = 'date'\n    return Math.abs(\n      dates[unit](start, undefined, firstOfWeek) -\n        dates[unit](end, undefined, firstOfWeek)\n    )\n  },\n\n  diff(dateA, dateB, unit) {\n    if (!unit || unit === 'milliseconds') return Math.abs(+dateA - +dateB)\n\n    // the .round() handles an edge case\n    // with DST where the total won't be exact\n    // since one day in the range may be shorter/longer by an hour\n    return Math.round(\n      Math.abs(\n        +dates.startOf(dateA, unit) / MILLI[unit] -\n          +dates.startOf(dateB, unit) / MILLI[unit]\n      )\n    )\n  },\n\n  total(date, unit) {\n    let ms = date.getTime(),\n      div = 1\n\n    switch (unit) {\n      case 'week':\n        div *= 7\n      case 'day':\n        div *= 24\n      case 'hours':\n        div *= 60\n      case 'minutes':\n        div *= 60\n      case 'seconds':\n        div *= 1000\n    }\n\n    return ms / div\n  },\n\n  week(date) {\n    var d = new Date(date)\n    d.setHours(0, 0, 0)\n    d.setDate(d.getDate() + 4 - (d.getDay() || 7))\n    return Math.ceil(((d - new Date(d.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7)\n  },\n\n  today() {\n    return dates.startOf(new Date(), 'day')\n  },\n\n  yesterday() {\n    return dates.add(dates.startOf(new Date(), 'day'), -1, 'day')\n  },\n\n  tomorrow() {\n    return dates.add(dates.startOf(new Date(), 'day'), 1, 'day')\n  },\n}\n\nexport default dates\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAmBA;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AARA;AAgCA;;;;AAnHA;AACA;AAqHA;;;;;;;;;;;;;;;;;;;;AC5JA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAGA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AAMA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAVA;AACA;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AA7IA;AACA;AA+IA;;;;;;;A","sourceRoot":""}