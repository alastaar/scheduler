{"version":3,"file":"static/webpack/static/development/pages/preferences.js.96e7b810517352ea9ea6.hot-update.js","sources":["webpack:///./components/EmailPreferences.js"],"sourcesContent":["import { Query, Mutation } from 'react-apollo';\nimport Error from './ErrorMessage';\nimport gql from 'graphql-tag';\nimport Table from './styles/Table';\nimport SickButton from './styles/SickButton';\nimport PropTypes from 'prop-types';\nimport User, { CURRENT_USER_QUERY } from './User';\n\nconst UPDATE_PREFERENCES_MUTATION = gql`\n  mutation updatePreferences($emailPreference: [EmailPreference], $userId: ID!) {\n    updatePreferences(emailPreference: $emailPreference, userId: $userId) {\n      id\n      emailPreference\n      name\n      lastName\n      email\n    }\n  }\n`;\n\nconst possiblePreferences = [\n  'REQUESTCREATED',\n  'REQUESTAPPROVED',\n  'REQUESTCONFIRMED',\n  'REQUESTREJECTED',\n  'REQUESTDELETED',\n  'APPOINTMENTTOMORROW',\n  'UPDATEDSTRIPEACCOUNT',\n  'UPDATEDCARD',\n];\n\n\n\nconst EmailPreferences = props => (\n  <User>\n      {({ data: { me } }) => (\n        <Query query={CURRENT_USER_QUERY}>\n          {({ data, loading, error }) => (\n            <div>\n              <Error error={error} />\n              <div>\n                <h2>Manage Email Preferences</h2>\n                <Table>\n                  <thead>\n                    <tr>\n                      <tv>Name</tv>\n                      <th>Email</th>\n                      {possiblePreferences.map(preference => <th key={preference}>{preference}</th>)}\n                      <th>üëáüèª</th>\n                    </tr>\n                  </thead>\n                  <tbody><UserPreferences user={me} key={me.id} /></tbody>\n                </Table>\n              </div>\n            </div>\n          )}\n        </Query>\n      )}\n  </User>\n);\n\nclass UserPreferences extends React.Component {\n  static propTypes = {\n    user: PropTypes.shape({\n      name: PropTypes.string,\n      email: PropTypes.string,\n      id: PropTypes.string,\n      emailPreference: PropTypes.array,\n    }).isRequired,\n  };\n  state = {\n    preferences: this.props.user.emailPreference,\n  };\n  handlePreferenceChange = (e) => {\n    const checkbox = e.target;\n    // take a copy of the current permissions\n    let updatedPreferences = [...this.state.preferences];\n    // figure out if we need to remove or add this permission\n    if (checkbox.checked) {\n      // add it in!\n      updatedPreferences.push(checkbox.value);\n    } else {\n      updatedPreferences = updatedPreferences.filter(preference => preference !== checkbox.value);\n    }\n    this.setState({ preferences: updatedPreferences });\n  };\n  render() {\n    const user = this.props.user;\n    return (\n      <Mutation\n        mutation={UPDATE_PREFERENCES_MUTATION}\n        variables={{\n          preferences: this.state.preferences,\n          userId: this.props.user.id,\n        }}\n      >\n        {(updatePreferences, { loading, error }) => (\n          <>\n            {error && <tr><td colspan=\"8\"><Error error={error} /></td></tr>}\n            < tr >\n              <td>{user.name} { user.lastName }</td>\n              <td>{user.email}</td>\n              {possiblePreferences.map(preference => (\n                <td key={preference}>\n                  <label htmlFor={`${user.id}-preference-${preference}`}>\n                    <input\n                      id={`${user.id}-preference-${preference}`}\n                      type=\"checkbox\"\n                      checked={this.state.preferences.includes(preference)}\n                      value={preference}\n                      onChange={this.handlePreferenceChange}\n                    />\n                  </label>\n                </td>\n              ))}\n              <td>\n                <SickButton type=\"button\" disabled={loading} onClick={updatePreferences}>\n                  Updat{loading ? 'ing' : 'e'}\n                </SickButton>\n              </td>\n            </tr>\n          </>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport { UPDATE_PREFERENCES_MUTATION };\nexport default EmailPreferences;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AACA;AAYA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdA;AAFA;AAFA;AACA;AA2BA;;;;;;;;;;;;;;;;;;AASA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApBA;AA6BA;;;;AAhEA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AACA;AAiEA;AACA;;;;A","sourceRoot":""}