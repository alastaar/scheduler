{"version":3,"file":"static/webpack/static/development/pages/_app.js.eef52a4ff3f5db490e57.hot-update.js","sources":["webpack:///./components/Money.js"],"sourcesContent":["import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Mutation } from 'react-apollo';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport User, { CURRENT_USER_QUERY } from './User';\nimport { prodStripe, devStripe } from '../config';\n\nconst CREATE_ORDER_MUTATION = gql`\n  mutation createOrder($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      requests {\n        id\n        name\n        lastName\n        approved\n      }\n    }\n  }\n`;\n\nfunction totalItems(cart){\n  return cart.reduce((tally, cartItem) => tally + cartItem.quantity, 0);\n}\n\nclass Money extends React.Component {\n\n  onToken = async (res, createOrder) =>  {\n    NProgress.start();\n    console.log(res.id);\n    const order = await createOrder({\n      variables: {\n        token: res.id,\n      }\n    }).catch(err => {\n      alert(err.message);\n    });\n\n    console.log(order);\n    Router.push({\n      pathname: '/order',\n      query: { id: order.data.createOrder.id }\n    })\n  };\n  render(){\n    const token = process.env.NODE_ENV === 'development' ? devStripe : prodStripe;\n    console.log(this.token);\n    return(\n      <User>\n        {({ data: { me }}) => (\n          <Mutation mutation={ CREATE_ORDER_MUTATION } refetchQueries={[{ query: CURRENT_USER_QUERY }]}>\n            { createOrder => (\n              <StripeCheckout\n                amount={calcTotalPrice(me.cart)}\n                name=\"Scratcher\"\n                description={`${totalItems(me.cart)} appointment confirmation`}\n                image={me.cart.length && me.cart[0].request && me.cart[0].request.referenceImage}\n                stripeKey={this.token}\n                currency=\"USD\"\n                email={me.email}\n                token={res => this.onToken(res, createOrder) }\n              >\n                {this.props.children}\n              </StripeCheckout>\n            )}\n          </Mutation>\n        )}\n      </User>\n    )\n  }\n\n}\n\nexport default Money;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAeA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;AADA;AADA;AAKA;AACA;AACA;AAVA;AAGA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAgBA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;AAoBA;;;;AA5CA;AACA;AA+CA;;;;A","sourceRoot":""}