{"version":3,"file":"static/webpack/static/development/pages/calendar.js.1304c3094d3e1f0f0a07.hot-update.js","sources":["webpack:///./components/CalendarList.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport gql from 'graphql-tag';\nimport dates from '../lib/dates';\nimport { perPage } from '../config';\nimport BigCalendar from \"react-big-calendar\";\nimport moment from \"moment\";\nimport CalendarStyles from './styles/CalendarStyles';\nimport debounce from 'lodash.debounce';\nimport { Query } from 'react-apollo';\nimport User from './User';\nimport CalendarComponent from './CalendarComponent';\nimport Router from 'next/router';\n\nmoment.locale(\"en\");\nconst localizer = BigCalendar.momentLocalizer(moment);\n\nconst allViews = Object.keys(BigCalendar.Views).map(k => BigCalendar.Views[k]);\n\nconst ALL_REQUESTS_CALENDAR_QUERY = gql`\n  query ALL_REQUESTS_CALENDAR_QUERY {\n    requests(orderBy: createdAt_DESC) {\n      id\n      name\n      email\n      details\n      dateOne\n      timeOne\n      approved\n      user{\n        name\n        lastName\n        email\n      }\n    }\n  }\n`;\n\n\nclass CalendarList extends Component {\n\n allViews = Object.keys(BigCalendar.Views).map(k => BigCalendar.Views[k])\n\n  state = {\n    view: \"day\",\n    date: new Date(),\n    width: 500,\n    cal_events: [],\n  };\n\n  convertDate = (date) => {\n    return moment(date);\n  }\n\n  convertTime = (time24) => {\n    var tmpArr = time24.split(':'), time12;\n    if(+tmpArr[0] == 12) {\n      time12 = tmpArr[0] + ':' + tmpArr[1] + ' pm';\n    }\n    else {\n      if(+tmpArr[0] == 0) {\n        time12 = '12:' + tmpArr[1] + ' am';\n      }\n      else {\n        if(+tmpArr[0] > 12) {\n          time12 = (+tmpArr[0]-12) + ':' + tmpArr[1] + ' pm';\n        }\n        else {\n          time12 = (+tmpArr[0]) + ':' + tmpArr[1] + ' am';\n        }\n      }\n    }\n    return time12;\n  };\n\n    eventStyleGetter = (event, approved, start, end, isSelected) => {\n      var backgroundColor = '#' + event.hexColor;\n      if(event.approved === \"no\") {\n        var style = {\n            backgroundColor: 'red',\n            borderRadius: '0px',\n            opacity: 0.8,\n            color: 'white',\n            border: '0px',\n            display: 'block'\n        };\n      } else if ( event.approved == \"yes\" ) {\n        var style = {\n            backgroundColor: 'black',\n            borderRadius: '0px',\n            opacity: 0.8,\n            color: 'white',\n            border: '0px',\n            display: 'block'\n        };\n      } else {\n        var style = {\n            backgroundColor: 'gold',\n            borderRadius: '0px',\n            opacity: 0.8,\n            color: 'black',\n            border: '0px',\n            display: 'block'\n        };\n      }\n      return {\n          style: style\n      };\n  };\n\n  handleSelectEvent = event => {\n    Router.push({\n      pathname: '/request-item',\n      query: { id: event.id },\n    });\n  };\n\n\n  render() {\n    console.log(this.props);\n    return (\n      <User>\n        {({ data: { me } }) => (\n        <CalendarStyles>\n        <div className=\"key\">\n          <div className=\"red\"></div><span>Pending</span>\n          <div className=\"black\"></div><span>Approved</span>\n          <div className=\"gold\"></div><span>Confirmed</span>\n        </div>\n        <Query query={ALL_REQUESTS_CALENDAR_QUERY}>\n          {({ data, loading, error }) => (\n            <div style={{ height: 500 }}>\n              <BigCalendar\n                events={data.requests.filter(request => request.email === me.email).map((request, index) => ({\n                  title: this.convertTime(request.timeOne) + ' ' + request.user.name + ' ' + request.user.email,\n                  start: this.convertDate(request.dateOne),\n                  end: this.convertDate(request.dateOne),\n                  approved: request.approved,\n                  id: request.id,\n                }))}\n                max={dates.add(dates.endOf(new Date(), 'day'), -1, 'hours')}\n                defaultDate={new Date()}\n                step={60}\n                showMultiDayTimes\n                views={['month', 'day', 'agenda']}\n                onSelectEvent={(event) => this.handleSelectEvent(event)}\n                eventPropGetter={(this.eventStyleGetter)}\n                localizer={localizer}\n              />\n            </div>\n          )}\n        </Query>\n        </CalendarStyles>\n      )}\n    </User>\n    );\n  }\n}\n\nexport default CalendarList;\nexport { ALL_REQUESTS_CALENDAR_QUERY };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAmBA;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AARA;AAkCA;;;;AArHA;AACA;AAuHA;;;;;A","sourceRoot":""}