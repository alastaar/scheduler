{"version":3,"file":"static/webpack/static/development/pages/bankupdate.js.a9864322d711442bea35.hot-update.js","sources":["webpack:///./components/UpdateBankInfo.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Link from 'next/link';\nimport User from './User';\nimport { Query, Mutation } from 'react-apollo';\nimport Error from './ErrorMessage';\nimport gql from 'graphql-tag';\nimport styled from 'styled-components';\nimport Form from './styles/Form';\nimport Table from './styles/Table';\nimport SickButton from './styles/SickButton';\nimport PropTypes from 'prop-types';\nimport { CURRENT_USER_QUERY } from './User';\nimport Router from 'next/router';\nimport {CardElement, injectStripe} from 'react-stripe-elements';\n\nconst BANK_UPDATE_MUTATION = gql`\n  mutation updateBankInfo($bankToken: String!) {\n    updateBankInfo(bankToken: $bankToken) {\n      id\n      accId\n    }\n  }\n`;\n\nconst StripedElement = styled.div`\n.StripeElement {\n  background-color: white;\n  height: 40px;\n  padding: 10px 12px;\n  border-radius: 4px;\n  border: 1px solid transparent;\n  box-shadow: 0 1px 3px 0 #e6ebf1;\n  -webkit-transition: box-shadow 150ms ease;\n  transition: box-shadow 150ms ease;\n}\n\n.StripeElement--focus {\n  box-shadow: 0 1px 3px 0 #cfd7df;\n}\n\n.StripeElement--invalid {\n  border-color: #fa755a;\n}\n\n.StripeElement--webkit-autofill {\n  background-color: #fefde5 !important;\n}\n`;\n\nconst stripe = Stripe('pk_test_K3j8JU1o7WrtlpA5zY8bavrR');\n\n\nclass UpdateBankInfo extends Component {\n\n  elements = stripe.elements();\n  // Custom styling can be passed to options when creating an Element.\n  style = {\n    base: {\n      // Add your base input styles here. For example:\n      fontSize: '16px',\n      color: \"#32325d\",\n    },\n  };\n\n  card = elements.create('card', {style});\n\n\n\n  state = {\n    currency: 'usd',\n  };\n\n  handleUserChange = e => {\n    const { name, type, value } = e.target;\n    const val = type === 'number' ? parseFloat(value) : value;\n    this.setState({ [name]: val });\n    this.setState({ name: nameVal.value, lastName: lastName.value, type: 'individual' });\n  };\n\n  updateBankInfo = async (e, updateStripeAccountMutation) => {\n    e.preventDefault();\n    console.log(this.state);\n    const res = await updateStripeAccountMutation({\n      variables: {\n        ...this.state,\n      },\n    });\n    console.log(\"going to the backend\");\n  };\n\n\n  render() {\n    this.card.mount('#card-element');\n    return (\n      <>\n      <User>\n        {({ data: { me } }) => (\n          <>\n            <h2>Card Details</h2>\n              <Mutation\n                mutation={ BANK_UPDATE_MUTATION }\n                variables={{\n                  ...this.state,\n                  userId: this.props.id,\n                }}\n              >\n                {(updateBankInfo, { loading, error }) => (\n                  <Form className=\"accountUpdate\" onSubmit={ async e => {\n                    console.log(this.state);\n                    await this.updateBankInfo(e, updateBankInfo);\n                  }}>\n                    <Error error={error} />\n                    <fieldset disabled={loading} aria-busy={loading}>\n                      <StripedElement>\n                        <div className=\"form-row\">\n                            <label htmlFor=\"card-element\">\n                              Debit card\n                            </label>\n                            <div id=\"card-element\">\n                            </div>\n\n                            <div id=\"card-errors\" role=\"alert\"></div>\n                          </div>\n                        </StripedElement>\n                      <button type=\"submit\">Sav{loading ? 'ing' : 'e'} Changes</button>\n                    </fieldset>\n                  </Form>\n                )}\n              </Mutation>\n            { me && (\n              <>\n\n              </>\n            )}\n            { !me && (\n              <>\n                <h2>Sorry this is not your account please move along </h2>\n              </>\n            )}\n          </>\n        )}\n\n      </User>\n      </>\n    );\n  }\n}\n\nexport default UpdateBankInfo;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAAA;AAAA;AAAA;AAyBA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AAAA;AAAA;AACA;AAGA;AACA;AADA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AADA;AACA;AAJA;AAGA;AAKA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAWA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAFA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlBA;AA8BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxCA;AAiDA;;;;AA7FA;AACA;AA+FA;;;;A","sourceRoot":""}