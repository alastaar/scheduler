{"version":3,"file":"static/webpack/static/development/pages/ur-request.js.8940344c1c4ea9187b4e.hot-update.js","sources":["webpack:///./components/RequesterList.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport styled from 'styled-components';\nimport RequestsPending from './RequestPending';\nimport RequestNeedApproved from './RequestNeedApproved';\nimport Pagination from './Pagination';\nimport { perPage } from '../config';\nimport User from './User';\nimport OrderListUser from './OrderListUser';\n\n\nconst ALL_REQUESTS_QUERY = gql`\n  query ALL_REQUESTS_QUERY($skip: Int = 0, $first: Int = ${ perPage }) {\n    requests(first: $first, skip: $skip, orderBy: createdAt_DESC) {\n      id\n      name\n      lastName\n      price\n      email\n      details\n      dateOne\n      timeOne\n      dateTwo\n      timeTwo\n      dateThree\n      timeThree\n      referenceImage\n      approved\n      user{\n        name\n        lastName\n        email\n      }\n    }\n  }\n`;\n\nconst RequestsList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 60px;\n  max-width = ${ props => props.theme.maxWidth }\n  margin: 0 auto;\n`;\n\nconst Center = styled.div`\n  text-align: center;\n`;\n\nclass RequestList extends Component {\n  render() {\n    return (\n      <User>\n        {({ data: { me } }) => (\n          <Center>\n            <>\n              <h2>Pending Requests</h2>\n              <Query query={ ALL_REQUESTS_QUERY } variables={{\n                skip: this.props.page * perPage - perPage,\n              }}>\n                { ({ data, error, loading }) => {\n                  if ( loading ) return <p> ... loading </p>;\n                  if ( error ) return <p> ERROR: { error.message }</p>;\n                  return <RequestsList>\n                    { data.requests.filter(request => request.user.email === me.email && request.approved == 'no').map(request => <RequesterPending request={request} key={ request.id }/>) }\n                  </RequestsList>;\n                } }\n              </Query>\n              <h2>Approved Requests</h2>\n              <Query query={ ALL_REQUESTS_QUERY } variables={{\n                skip: this.props.page * perPage - perPage,\n              }}>\n                { ({ data, error, loading }) => {\n                  if ( loading ) return <p> ... loading </p>;\n                  if ( error ) return <p> ERROR: { error.message }</p>;\n                  return <RequestsList>\n                    { data.requests.filter(request => request.user.email === me.email && request.approved == 'yes').map(request =>\n                      <RequestNeedApproved request={request} key={ request.id }/> ) }\n                  </RequestsList>\n                } }\n              </Query>\n              <h2>Confirmed Requests</h2>\n              <OrderListUser/>\n            </>\n          </Center>\n        )}\n      </User>\n    )\n  }\n}\n\nexport default RequestList;\nexport { ALL_REQUESTS_QUERY };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AA0BA;AAAA;AAAA;AAAA;AAIA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7BA;AAmCA;;;;AAvCA;AACA;AAyCA;;;;;A","sourceRoot":""}