{"version":3,"file":"static/webpack/static/development/pages/orders.js.a388f76cf2b7255ef752.hot-update.js","sources":["webpack:///./components/RequestList.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport styled from 'styled-components';\nimport Request from './Request';\nimport Pagination from './Pagination';\nimport { perPage } from '../config';\n\nconst ALL_REQUESTS_QUERY = gql`\n  query ALL_REQUESTS_QUERY($skip: Int = 0, $first: Int = ${ perPage }) {\n    requests(first: $first, skip: $skip, orderBy: createdAt_DESC) {\n      id\n      name\n      price\n      email\n      details\n      dateOne\n      timeOne\n      dateTwo\n      timeTwo\n      dateThree\n      timeThree\n      referenceImage\n    }\n  }\n`;\n\nconst RequestsList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 60px;\n  max-width = ${ props => props.theme.maxWidth }\n  margin: 0 auto;\n`;\n\nconst Center = styled.div`\n  text-align: center;\n`;\n\nclass RequestList extends Component {\n  render() {\n    return (\n      <Center>\n        <h2>Pending Requests</h2>\n        <h2>Approved Requests</h2>\n        <Pagination page={ this.props.page } />\n        <Query query={ ALL_REQUESTS_QUERY } variables={{\n          skip: this.props.page * perPage - perPage,\n        }}>\n          { ({ data, error, loading }) => {\n            if ( loading ) return <p> ... loading </p>;\n            if ( error ) return <p> ERROR: { error.message }</p>;\n            return <RequestsList>\n              { data.requests.map(request => <Request request={request} key={ request.id }/>) }\n            </RequestsList>;\n          } }\n        </Query>\n        <Pagination page={ this.props.page } />\n      </Center>\n    )\n  }\n}\n\nexport default RequestList;\nexport { ALL_REQUESTS_QUERY };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAmBA;AAAA;AAAA;AAAA;AAIA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AArBA;AACA;AAuBA;;;;;A","sourceRoot":""}